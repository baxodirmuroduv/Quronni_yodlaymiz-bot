import logging
import os

import httpx
import wikipedia
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import WebAppInfo, InlineKeyboardButton, BotCommand, InlineKeyboardMarkup
from dotenv import load_dotenv

from data import Data
from menu import menu1, tahorat_niyatt, tahorat_h, suralar_get, uzb_tillarda, arb_tillarda, audio, ikkinchi_ekrani, \
    qoshimcha_button


class LoginState(StatesGroup):
    name = State()


load_dotenv('.env')
wikipedia.set_lang('uz')
TOKEN = os.getenv('Token')

logging.basicConfig(level=logging.INFO)

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

import psycopg2

con = psycopg2.connect(
    dbname='projectdb',  # noqa
    user='ddd',
    password='777',
    host='localhost'
)
cur = con.cursor()


class FormSura(StatesGroup):
    raqam = State()


class Formoyat(StatesGroup):
    raqam = State()


tahorat_vik = "Tahorat ‚Äî namoz o ªqish, ibodat oldidan yuvinish," \
              " poklanish jarayoni. Xususiy shakli sifatida tayammum" \
              " ko ªriladi. Islomda tahoratning ikki turi mavjud: vuzu º ‚Äî kichik" \
              " tahorat ‚Äî qo ªl oyoq va yuzni yuvish;" \
              " g ªusul ‚Äî katta tahorat ‚Äî to ªla" \
              " yuvinish, cho ªmilish. Tahoratning 4 ta farzi bor; yuzni yuvmoq;" \
              " ikki qo ªlni tirsak ila qo ªshib yuvmoq; ikki oyoqni to ªpig ªi ila qo ªshib yuvmoq," \
              " boshning to ªrtdan bir qismiga mash tortish ‚Äî ikki qo ªlni ho ªllab surtmoq. Bu farzlardan " \
              "birortasi bajarilmasa, tahorat haqiqiy bo ªlmaydi. Tahoratning farzlaridan " \
              "boshqa uning sunnat va vojiblari ham bo ªladi. Tahorat oladigan har bir kimsa " \
              "suvni keragidan ortiq ham, oz ham sarf qilmasligi; suvni yuzga shapillatib sochmasligi; " \
              "tahorat qilayotganda o ªrinsiz gaplashmasligi; iflos yerda tahorat olmasligi kerak. " \
              "Tahorat qilish uchun suv topilmasa tayammum qilinadi. Tahorati bor kishida quyidagi" \
              " holatlardan biri yuz bersa tahorati buzilgan hisoblanadi: vujudning biron yeridan qon," \
              " yiring, suv chiqsa; og ªzi to ªlib qussa; tupurgan vaqt tupugini yarmidan ko ªpi qon bo ªlsa;" \
              " kichik va katta hojatga borsa va orqadan yel chiqarsa; bexush yoki mast bo ªlsa; namoz vaqtida kulsa;" \
              " uxlasa. Tahoratni buzadigan holatlar ro ªy bersa, tahoratni boshqatdan qilish lozim bo ªladi. "

taxorat_niyatlari = """
Tahorat uchun suv hozirlagandan keyin:

    Qibla tomonga qarab, ichida "Tahorat olishni niyat qildim" deyiladi.
    "Auzu billahi minash-shaytonir rojiym. Bismillahir rohmanir rohiym", deyiladi.
    Qo ªllar bandigacha 3 marta yuviladi.
    O ªng qo ªlda suv olinib, og ªiz 3 marta g ªarg ªara qilib chayiladi va misvok qilinadi.
    Burunga o ªng qo ªl bilan 3 marta suv tortilib, chap qo ªl bilan qoqib tozalanadi.
    Yuz 3 marta yuviladi.
    Avval o ªng qo ªl tirsaklar bilan qo ªshib ishqalab yuviladi, so ªngra chap qo ªl.
    Hovuchga suv olib, to ªkib tashlab, ho ªli bilan boshning hamma qismiga masx tortiladi.
    Ko ªrsatkich barmoq bilan quloqlarning ichi, bosh barmoqlar bilan esa quloq orqasi masx qilinadi.
    Ikkala kaftning orqasi bilan bo ªyin masx qilinadi.
    Chap qo ªl bilan o ªng oyoqni oshiq qismi bilan qo ªshib, barmoqlar orasini ishqalab 3 marta yuviladi, keyin chap oyoq.
    Qibla tomonga qarab, ichida "Ashhadu an La ilaha illallohu va ashhadu anna Muhammadan abduhu va rosuluh" deyiladi."""

gusul_vik = "G ªusl (arab. ‚Äî cho ªmilish) ‚Äî pok bo ªlish" \
            " uchun butun badanni maxsus tartibda yuvish. " \
            "G ªusl jinsiy aloqa, ihtilom, hayzdan keyin farz bo ªladi. " \
            "Hanafiylik mazhabida G ªuslning sharti 3 ta ‚Äî og ªizni g ªarg ªara" \
            " qilish, burunni yaxshilab yuvish, badanning hamma joyini " \
            "suv bilan poklash. boshqa mazhablarda og ªiz-burun chayish farz emas." \
            " Islomda bir haftada 1-marta (juma kuni), 2 hayit va arafa kunlari " \
            "G ªusl qilish sunnat sanaladi. G ªusl katta tahorat deb ham ataladi." \
            " G ªusl mayitga nisbatan ham ishlatilib, bu ishni g ªassol (yuvg ªuchi) " \
            "bajaradi. G ªusl haqida Qur ºonda zikr qilingan\n "

gusul_shartlar = "G ªUSLNING FARZLARI\n" \
                 "1. Og ªizni chayqash.\n" \
                 "2. Burunni chayqash.\n" \
                 "3. Badanning barcha yerini yuvish.\n" \
                 "G ªuslda quyidagi narsalar makruxdir:\n1. Suvni isrof qilish.\n2. Suvni o ªta oz ishlatish.\n3. Suvni yuziga urish." \
                 "4. Odamlar gapini gapirish.\n5. Uzrsiz boshqadan yordam olish.\n6 . Duo qilish. \n\n" \
                 "G ªUSLNI VOJIB QILUVCHI NARSALAR\n" \
                 "1. Ajralib chiqayotganda shahvat bilan otilib keladigan maniyni tushirish.\n" \
                 "2. Zakarning boshi old yoki orqa (farj) ichiga g ªoyib bo ªlishi qiluvchiga ham, qilinuvchiga ham (g ªuslni vojib qiladi)\n" \
                 "3. Uyg ªongan kishi maniy yoki maziyni ko ªrishi.\n" \
                 "4 ‚àí5 . Hayz va nifosning to ªxtashi.\n" \
                 "6. SHahid bo ªlmagan musulmon mayyitga ham g ªusl vojib bo ªladi.\n" \
                 "7. Nomusulmon shaxs Islomga kirsa."


@dp.message_handler(commands=['start', 'help'])
async def welcome(message: types.Message):
    await bot.set_my_commands([BotCommand("start", "Qayta ishga tushurish"), BotCommand("help", "yordam olish")])
    menu1()
    user_id = message.from_user.id
    user_username = message.from_user.username
    user_firs_name = message.from_user.first_name
    user_message = message.text
    query = "insert into bot_user(user_id, user_username,user_firs_name, message)" \
            " values (%s,%s,%s,%s)"
    cur.execute(query, (user_id, user_username, user_firs_name, user_message))
    con.commit()
    await message.answer(text='Assalomu alekum musulmonlarü§µ', reply_markup=menu1())


@dp.callback_query_handler(Text('rasm'))
async def alifbo(clb: types.CallbackQuery):
    await clb.message.delete()
    ikm = InlineKeyboardMarkup()
    ikm.add(InlineKeyboardButton('Orqaga', callback_data='orqaüëâ'))
    await bot.send_photo(clb.from_user.id, open('position3.jpg', 'rb'), reply_markup=ikm)


@dp.callback_query_handler(lambda call: call.data == 'orqaüëâ')
async def back_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("Qo'shimcha tugmalar", reply_markup=qoshimcha_button())


@dp.callback_query_handler(Text('qoshimcha'))
async def qoshimcha_malumotlar(clb: types.CallbackQuery):
    await clb.message.delete()
    await clb.message.answer("Qo'shimcha tugmalar", reply_markup=qoshimcha_button())


@dp.callback_query_handler(lambda call: call.data == 'üíô')
async def back_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    username = callback.from_user.first_name
    reaksiya = callback.data
    query = 'insert into like_(user_name, reaction) values (%s,%s)'
    cur.execute(query, (username, reaksiya))
    con.commit()
    ikm = InlineKeyboardMarkup()
    ikm.add(
        InlineKeyboardButton('Orqaga', callback_data='orqaüíô')
    )
    await callback.message.answer('Sizga yoqqanidan xursandmizü•∞ ', reply_markup=ikm)


@dp.callback_query_handler(lambda call: call.data == 'üíî')
async def back_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    username = callback.from_user.first_name
    reaksiya = callback.data
    query = 'insert into like_(user_name, reaction) values (%s,%s)'
    cur.execute(query, (username, reaksiya))
    con.commit()
    ikm = InlineKeyboardMarkup()
    ikm.add(
        InlineKeyboardButton('Orqaga', callback_data='orqaüíô')
    )
    await callback.message.answer('Fikringiz uchun raxmatü§ó', reply_markup=ikm)


@dp.callback_query_handler(lambda call: call.data == 'orqaüíô')
async def back_menu(callback: types.CallbackQuery):
    await bot.edit_message_text("Qo'shimcha tugmalar", callback.from_user.id, callback.message.message_id,
                                reply_markup=qoshimcha_button())


@dp.callback_query_handler(lambda call: call.data == 'orqagal')
async def back_menu(callback: types.CallbackQuery):
    await bot.edit_message_text('Assalomu alekum musulmonlarü§µ', callback.from_user.id, callback.message.message_id,
                                reply_markup=menu1())


@dp.callback_query_handler(Text("tahorat"))
async def tahorat_haqida(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(text=tahorat_vik, reply_markup=tahorat_h())


@dp.callback_query_handler(lambda call: call.data == 'orqaga1')
async def back_menu(callback: types.CallbackQuery):
    await bot.edit_message_text('Assalomu alekum musulmonlarü§µ', callback.from_user.id, callback.message.message_id,
                                reply_markup=menu1())


@dp.callback_query_handler(Text("sikl"))
async def tahorat_niyatlari(callback: types.CallbackQuery):
    await callback.message.delete()
    tahorat_niyatt()
    await callback.message.answer(taxorat_niyatlari, reply_markup=tahorat_niyatt())


@dp.callback_query_handler(lambda call: call.data == 'orqaga2')
async def back_menu(callback: types.CallbackQuery):
    await bot.edit_message_text(tahorat_vik, callback.from_user.id, callback.message.message_id,
                                reply_markup=tahorat_h())


@dp.callback_query_handler(Text("gusul"))
async def gusul(callback: types.CallbackQuery):
    await callback.message.delete()
    inkb = InlineKeyboardMarkup()
    inkb.add(
        InlineKeyboardButton(text='Orqaga', callback_data='orqaga3'),
        InlineKeyboardButton("Qo'shimcha üìÇ", web_app=WebAppInfo(url='https://uz.wikipedia.org/wiki/G%CA%BBusl'))
    )
    await callback.message.answer(text=gusul_vik + gusul_shartlar, reply_markup=inkb)


@dp.callback_query_handler(lambda call: call.data == 'orqaga3')
async def back_menu(callback: types.CallbackQuery):
    await bot.edit_message_text('Assalomu alekum musulmonlarü§µ', callback.from_user.id, callback.message.message_id,
                                reply_markup=menu1())


sd = suralar_get()
data = ''
for i in sd[0]:
    data += ''.join(i)


@dp.callback_query_handler(Text("quron"))
async def quronga_kirish(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("Surani qidirish\n" + data, reply_markup=sd[1])


@dp.callback_query_handler(Text('search'))
async def search(callback: types.CallbackQuery):
    await FormSura.raqam.set()
    await callback.message.answer('Surani raqamini kiriting: ')


@dp.callback_query_handler(Text('orqagas'))
async def orqagas(clb: types.CallbackQuery):
    await bot.edit_message_text('Assalomu alekum musulmonlarü§µ', clb.from_user.id, clb.message.message_id,
                                reply_markup=menu1())


@dp.message_handler(state=FormSura.raqam)
async def oyatlarga_kirish(msg: types.Message, state: FSMContext):
    await state.update_data(number=msg.text)
    sb = uzb_tillarda(msg.text)
    await msg.answer(sb[0], reply_markup=sb[1])
    await state.finish()


@dp.callback_query_handler(Text('sura_orqaga'))
async def orq(clb: types.CallbackQuery):
    await bot.edit_message_text("Surani qidirish\n" + data, clb.from_user.id, clb.message.message_id,
                                reply_markup=sd[1])


@dp.callback_query_handler(lambda callback: 'arb_' in callback.data)
async def arab_tilida(clb: types.CallbackQuery):
    await clb.message.delete()
    n = clb.data.lstrip('arb_')
    sb = arb_tillarda(n)
    await clb.message.answer(sb[0], reply_markup=sb[1])


@dp.callback_query_handler(lambda callback: 'uzb_' in callback.data)
async def uzb_tilidaa(clb: types.CallbackQuery):
    await clb.message.delete()
    n = clb.data.lstrip('uzb_')
    sb = uzb_tillarda(n)
    await clb.message.answer(sb[0], reply_markup=sb[1])


@dp.callback_query_handler(lambda callback: 'audio_' in callback.data)
async def audio_file(clb: types.CallbackQuery):
    n = clb.data.lstrip('audio_')
    sb = audio(n)
    ikm = InlineKeyboardMarkup(row_width=2)
    ikm.add(
        InlineKeyboardButton('Orqaga', callback_data='orqagat'),
    )
    await clb.message.answer(sb, reply_markup=ikm)


@dp.callback_query_handler(Text('orqagat'))
async def orqagat(clb: types.CallbackQuery):
    await bot.edit_message_text("Surani qidirish\n" + data, clb.from_user.id, clb.message.message_id,
                                reply_markup=sd[1])


@dp.callback_query_handler(Text(contains='page'))
async def wek(callback: types.CallbackQuery):
    t = callback.data.split('=')[1]
    op = ikkinchi_ekrani(t)
    data = ''
    for i in op[0]:
        data += ''.join(i)
    await bot.edit_message_text("Surani qidirish\n" + data, callback.from_user.id, callback.message.message_id,
                                reply_markup=op[1])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
